name: Sync Repository
author: zjns
description: Sync repository

inputs:
  up_repo:
    description: Optional, upstream repository, like 'owner/example_repo', default using parent if is a fork repository.
    required: false
    default: ''

  token:
    description: Optional, Github token, no push event triggered if using 'secrets.GITHUB_TOKEN' or 'github.token'.
    required: false
    default: ${{ github.token }}

  branch:
    description: Optional, branch to be updated
    required: false
    default: ${{ github.ref_name }}

  up_branch:
    description: Optional, upstream branch to be sycned
    required: false
    default: ${{ github.ref_name }}

  method:
    description: Optional, method to sync repo, one of [rebase, merge, hardreset]
    required: false
    default: rebase

  gpg_private_key:
    description: Optional, for auto gpg signing
    required: false
    default: ''

  gpg_passphrase:
    description: Optional, for auto gpg signing
    required: false
    default: ''

outputs:
  commit_count:
    description: Synced commit count
    value: ${{ steps.merge.outputs.diff_count }}

  commits:
    description: Synced commits, json format, like '[{"author":"sam","committer":"sam","message":"hello!"}]'
    value: ${{ steps.merge.outputs.diff }}

runs:
  using: 'composite'

  steps:
    - name: Clone
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ inputs.token }}
        ref: ${{ inputs.branch }}

    - name: Import GPG key
      id: import_gpg
      if: inputs.gpg_private_key != '' && inputs.gpg_passphrase != ''
      uses: crazy-max/ghaction-import-gpg@v4.1.0
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true
        # not supported with GitHub
        git_push_gpgsign: 'no'

    - name: Get up repo
      shell: bash
      id: get-up_repo
      run: |
        up_repo="${{ inputs.up_repo }}"
        if [ -n "$up_repo" ]; then
          echo "::set-output name=up_repo::$up_repo"
          exit 0
        fi

        token="${{ inputs.token }}"
        repo="$GITHUB_REPOSITORY"
        pip3 install -U urllib3

        py_get_up_repo=$(cat <<EOM
        import json
        from urllib3 import PoolManager

        def request(url, method='GET'):
          http = PoolManager()
          response = http.request(method, url)
          data = json.loads(response.data.decode('utf-8'))
          return data

        url = 'https://$token@api.github.com/repos/$repo'
        try:
          response = request(url)
          full_name = response['parent']['full_name']
          print(full_name)
        except Exception:
          print('')
        EOM
        )

        up_repo="`python3 -c "$py_get_up_repo"`"
        echo "::set-output name=up_repo::$up_repo"

    - name: Merge upstream
      shell: bash
      id: merge
      run: |
        token="${{ inputs.token }}"
        branch="${{ inputs.branch }}"
        up_branch="${{ inputs.up_branch }}"
        up_repo="${{ steps.get-up_repo.outputs.up_repo }}"
        method="${{ inputs.method }}"
        owner="${GITHUB_REPOSITORY%%/*}"

        echo "::set-output name=diff_count::0"
        echo "::set-output name=diff::[]"

        user_info="`curl https://$token@api.github.com/user --silent`"
        user="`echo "$user_info" | sed -n 's/.*"login":[ ]*"\(.*\)".*/\1/p'`"
        email="`echo "$user_info" | sed -n 's/.*"email":[ ]*"\(.*\)".*/\1/p'`"
        [ -z "$user" ] && user="$owner"
        [ -z "$email" ] && email="$owner@example.com"
        echo "::add-mask::$user"
        echo "::add-mask::$email"

        git config --global user.name "$user"
        git config --global user.email "$email"
        git remote add upstream https://github.com/$up_repo.git
        git fetch upstream $up_branch

        diff_count=`git rev-list --count upstream/$up_branch ^$branch`
        if [ $diff_count != 0 ]; then
          IFS=$(echo -en "\n\b")
          function join { local IFS="$1"; shift; echo "$*"; }

          format='{"author":"%an","committer":"%cn","message":"%s"}'
          diff=(`git log --pretty=format:$format upstream/$up_branch ^$branch`)
          diff_json="[`join , ${diff[@]}`]"
        else
          echo "Do nothing, branch $branch is up to date."
          echo "::set-output name=diff_count::0"
          echo "::set-output name=diff::[]"
          exit 0
        fi

        if [ "$method" = "rebase" ]; then
          echo "::set-output name=diff_count::$diff_count"
          echo "::set-output name=diff::$diff_json"
          git rebase upstream/$up_branch
        elif [ "$method" = "merge" ]; then
          echo "::set-output name=diff_count::$diff_count"
          echo "::set-output name=diff::$diff_json"
          git merge --no-edit upstream/$up_branch
        elif [ "$method" = "hardreset" ]; then
          echo "::set-output name=diff_count::0"
          echo "::set-output name=diff::[]"
          git reset --hard upstream/$up_branch
        else
          echo "Invalid method $method to sync."
          exit 1
        fi
        result=$?
        if [ $result == 0 ]; then
          git push --force
        else
          echo "Sync failed, exit code: $result."
          exit $result
        fi
